#version 430 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D output_img;
const float PI = 3.14159265358979323846;
vec2 ComplexExp(vec2 complex){
	float c = cos(abs(complex.y));
	float s =complex.y<0 ? -sin(abs(complex.y)):sin(abs(complex.y));
	return vec2(c,s);
}

void main(){
	uint Size = gl_NumWorkGroups.y;
	uint b = Size >> (gl_GlobalInvocationID.x + 1);
    vec2 mult = 2 * PI * vec2(0, 1) / Size;
    uint i = (2 * b * (gl_GlobalInvocationID.y / b) + gl_GlobalInvocationID.y % b) % Size;
    vec2 twiddle = ComplexExp(-mult * ((gl_GlobalInvocationID.y / b) * b));
	imageStore(output_img, ivec2(gl_GlobalInvocationID.xy), vec4(twiddle.x, twiddle.y, i, i + b));
}